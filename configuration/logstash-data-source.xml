<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->

<configuration>
  <!-- logstash.conf -->
  <property>
    <name>content</name>
    <description>This is logstash configuration file to define input, filter and output.</description>
    <value>
# pipeline of yarn apps
input {
  exec {
    command => "if [ `hostname` == {{rm_host}} ]; then find {{logstash_log_dir}} -name yarn.apps -size +100M -delete; python {{logstash_bin}}/yarn-apps.py >> {{logstash_log_dir}}/yarn.apps; fi"
    interval => 60
  }
}
input {
  file {
    path => "{{logstash_log_dir}}/yarn.apps"
    sincedb_path => "{{logstash_sincedb_path}}/yarn.apps"
    type => "yarn.apps"
  }
}
filter {
  if [type] == "yarn.apps" {
    grok {
      match => {   
        "message" => "%{GREEDYDATA:appId}\s+%{WORD:appType}\s+%{WORD:appState}\s+%{WORD:finalStatus}\s+%{GREEDYDATA:queue}\s+%{GREEDYDATA:user}\s+%{NUMBER:vCores}\s+%{NUMBER:memory}\s+%{NUMBER:vCoreCapacity}\s+%{NUMBER:memoryCapacity}\s+%{NUMBER:vcoreSeconds}\s+%{NUMBER:memorySeconds}\s+%{NUMBER:elapsedTime}\s+%{GREEDYDATA:finishedDate}"
      }
    }
    if ("_grokparsefailure" in [tags]) { drop {} }
    mutate {
      convert => ["vCores", "integer"]
      convert => ["memory", "integer"]
      convert => ["vCoreCapacity", "integer"]
      convert => ["memoryCapacity", "integer"]
      convert => ["vcoreSeconds", "integer"]
      convert => ["memorySeconds", "integer"]
      convert => ["elapsedTime", "integer"]
    }
  }
}
output {
  if [type] == "yarn.apps" {
    if [appState] == "RUNNING" {
      elasticsearch {
        hosts => [{% for node in elastic_data_hosts %}"{{node}}:{{elastic_port}}"{% if not loop.last %},{% endif %}{% endfor %}]
        index => "logstash-yarn-running"
        template => "{{logstash_log_dir}}/template-running.json"
        template_name => "logstash-yarn-running"
      }
    }
    if [appType] != "FREE" {
      elasticsearch {
        hosts => [{% for node in elastic_data_hosts %}"{{node}}:{{elastic_port}}"{% if not loop.last %},{% endif %}{% endfor %}]
        index => "logstash-yarn-apps"
        document_id => "yarn-%{appId}"
        doc_as_upsert => true
        action => "update"
        template => "{{logstash_log_dir}}/template-finished.json"
        template_name => "logstash-yarn-apps"
      }
    }
  }
}

# pipeline of disk usage
input {
  exec {
    command => "df --total -l -BG|grep total"
    interval => 30
    type => "disk"
  }
}
filter {
  if [type] == "disk" {
    grok {
      match => {   
        "message" => "total\s+%{NUMBER:total}G\s+%{NUMBER:used}G\s+%{NUMBER:avail}G"
      }
    }
    if ("_grokparsefailure" in [tags]) { drop {} }
    mutate {
      convert => ["total", "integer"]
      convert => ["used", "integer"]
      convert => ["avail", "integer"]
    }
  }
}

output {
  if [type] == "disk" {
    elasticsearch {
      hosts => [{% for node in elastic_data_hosts %}"{{node}}:{{elastic_port}}"{% if not loop.last %},{% endif %}{% endfor %}]
      index => "logstash-disk"
      template => "{{logstash_log_dir}}/template-disk.json"
      template_name => "logstash-disk"
    }
  }
}
    </value>
    <value-attributes>
      <show-property-name>false</show-property-name>
    </value-attributes>
  </property>
</configuration>
