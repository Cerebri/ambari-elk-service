import json
import requests
import math
import datetime
import time

queueCapacity = {}
memoryTotal = 0
vcoreTotal = 0
# this time is the records generation time in yarn.apps file
selfTimestamp = datetime.datetime.fromtimestamp(int(time.time())).isoformat()
rm_hosts = {{rm_hosts}}

def requests_rm_get(resourcepath):
    r = []
    for rm_host in rm_hosts:
        try:
            r = requests.get('http://' + rm_host + ':{{rm_port}}/ws/v1/' + resourcepath)
            break
        except:
            if rm_host != rm_hosts[-1]:
                pass
            else:
                raise
    return r.json()
def parse_queue(queueList, parent):
    global queueCapacity
    for queue in queueList:
        name = queue['queueName']
        path = parent + '.' + name
        if 'queues' in queue and 'queue' in queue['queues']:
            parse_queue(queue['queues']['queue'], path)
        else:
            capacity = int(queue['absoluteCapacity'])
            memory = math.ceil(float(capacity * memoryTotal) / 100)
            vcore = math.ceil(float(capacity * vcoreTotal) / 100)
            queueCapacity[path] = {}
            queueCapacity[path]['vcore'] = vcore
            queueCapacity[path]['memory'] = memory
            queueCapacity[path]['vcoreFree'] = vcore
            queueCapacity[path]['memoryFree'] = memory
            
def yarn_scheduler():
    output = requests_rm_get('cluster/scheduler')
    rootQueue = output['scheduler']['schedulerInfo']['queueName']
    if 'queues' in output['scheduler']['schedulerInfo'] and 'queue' in output['scheduler']['schedulerInfo']['queues']:
        queues = output['scheduler']['schedulerInfo']['queues']['queue']
        parse_queue(queues, rootQueue)
        
def yarn_metics():
    global memoryTotal
    global vcoreTotal
    output = requests_rm_get('cluster/metrics')
    memoryTotal = int(output['clusterMetrics']['totalMB'])
    vcoreTotal = int(output['clusterMetrics']['totalVirtualCores'])
      
def yarn_apps():
    output = requests_rm_get('cluster/apps')
    apps = output['apps']
    vcoreUsed = 0
    memoryUsed = 0
    if apps is not None:
        appList = apps['app']
        for app in appList:
            id = app['id']
            type = app['applicationType']
            state = app['state']
            finalStatus = app['finalStatus']
            queue = app['queue']
            user = app['user']
            if int(app['allocatedVCores']) > 0:
                vcores = int(app['allocatedVCores'])
            else:
                vcores = 0
            if int(app['allocatedMB']) > 0:
                memory = int(app['allocatedMB'])
            else:
                memory  = 0
            if int(app['vcoreSeconds']) > 0:
                vcoreSeconds = int(app['vcoreSeconds'])
            else:
                vcoreSeconds = 0
            if int(app['memorySeconds']) > 0:
                memorySeconds = int(app['memorySeconds'])
            else:
                memorySeconds = 0
            elapsedTime = long(app['elapsedTime'])/1000
            finishedTime = long(app['finishedTime'])/1000
            if finishedTime > 0:
                selfFinishedTime = datetime.datetime.fromtimestamp(finishedTime).isoformat()
            else:
                # if the job is running set the time to current time
                selfFinishedTime = datetime.datetime.fromtimestamp(int(time.time())).isoformat()
            
            vcoreCapacity = 0
            memoryCapacity = 0
            for key, value in queueCapacity.iteritems():
                if key.split('.')[-1] == queue:
                    queue = key
                    vcoreCapacity = value['vcore']
                    memoryCapacity = value['memory']
                    value['vcoreFree'] = value['vcoreFree'] - vcores
                    value['memoryFree'] = value['memoryFree'] - memory
                    break
            
            print "%s %s %s %s %s %s %s %d %d %d %d %d %d %d %s" % (selfTimestamp, id, type, state, finalStatus, queue, user, vcores, memory, vcoreCapacity, memoryCapacity, vcoreSeconds, memorySeconds, elapsedTime, selfFinishedTime)
            vcoreUsed = vcoreUsed + vcores
            memoryUsed = memoryUsed + memory
            
    for key, value in queueCapacity.iteritems():
        if value['vcoreFree'] < 0:
            value['vcoreFree'] = 0;
        if value['memoryFree'] < 0:
            value['memoryFree'] = 0;
        print "%s %s %s %s %s %s %s %d %d %d %d %d %d %d %s" % (selfTimestamp, "None", "OTHERS", "RUNNING", "UNDEFINED", key, "None", value['vcoreFree'], value['memoryFree'], value['vcore'], value['memory'], 0, 0, 0, selfFinishedTime)

    vcorFree = vcoreTotal - vcoreUsed
    if vcorFree < 0:
        vcorFree = 0
    memoryFree = memoryTotal - memoryUsed
    if memoryFree < 0:
        memoryFree = 0
    print "%s %s %s %s %s %s %s %d %d %d %d %d %d %d %s" % (selfTimestamp, "None", "OTHERS", "RUNNING", "UNDEFINED", "None", "None", vcorFree, memoryFree, vcoreTotal, memoryTotal, 0, 0, 0, selfFinishedTime)
    print "%s %s %s %s %s %s %s %d %d %d %d %d %d %d %s" % (selfTimestamp, "Others", "OTHERS", "RUNNING", "UNDEFINED", "Others", "None", vcorFree, memoryFree, vcoreTotal, memoryTotal, 0, 0, 0, selfFinishedTime)

if __name__ == "__main__":
    yarn_metics()
    yarn_scheduler()
    yarn_apps()
